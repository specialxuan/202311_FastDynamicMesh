# GNU GCC/G++ compilers
if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    message("compiler: gnu gcc compiler")
    set(CMAKE_C_FLAGS_DEBUG "-std=c11 -g -pthread -march=native")
    set(CMAKE_C_FLAGS_RELEASE "-std=c11 -O2 -pthread -march=native")
    set(CMAKE_CXX_FLAGS_DEBUG "-std=c++11 -g -Wall -pthread -march=native")
    set(CMAKE_CXX_FLAGS_RELEASE "-std=c++11 -O2 -Wunused-function -pthread -march=native")
endif()
# Microsoft Visual C++ Compilers
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    message("compiler: microsoft msvc compiler")
    set(CMAKE_C_FLAGS "/std:c11 /bigobj /utf-8")
    set(CMAKE_C_FLAGS_DEBUG "/std:c11 /bigobj /fp:precise /Zi /EHsc /utf-8")
    set(CMAKE_C_FLAGS_RELEASE "/std:c11 /bigobj /fp:precise /Gy /Oi /Oy /O2 /Ot /Zi /EHsc /utf-8")
    set(CMAKE_CXX_FLAGS "/std:c++11 /bigobj /utf-8")
    set(CMAKE_CXX_FLAGS_DEBUG "/std:c++11 /bigobj /fp:precise /Zi /EHsc /utf-8")
    set(CMAKE_CXX_FLAGS_RELEASE "/std:c++11 /bigobj /fp:precise /Gy /Oi /Oy /O2 /Ot /Zi /EHsc /utf-8")
endif()
# Clang
if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    message("compiler: llvm clang compiler")
    set(CMAKE_C_FLAGS_DEBUG "-std=c11 -g -pthread -march=native")
    set(CMAKE_C_FLAGS_RELEASE "-std=c11 -O2 -pthread -march=native")
    set(CMAKE_CXX_FLAGS_DEBUG "-std=c++11 -g -Wall -pthread -march=native")
    set(CMAKE_CXX_FLAGS_RELEASE "-std=c++11 -O2 -Wunused-function -pthread -march=native")
endif()